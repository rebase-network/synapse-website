(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{124:function(e,n,a){"use strict";a.r(n),a.d(n,"frontMatter",(function(){return d})),a.d(n,"metadata",(function(){return s})),a.d(n,"rightToc",(function(){return l})),a.d(n,"default",(function(){return r}));var t=a(2),c=a(6),b=(a(0),a(132)),d={id:"sdk",title:"Synapse sdk",sidebar_label:"SDK"},s={id:"sdk",isDocsHomePage:!0,title:"Synapse sdk",description:"DApp demo//github.com/rebase-network/simplestdapp/",source:"@site/docs/sdk.md",permalink:"/docs/",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/sdk.md",sidebar_label:"SDK",sidebar:"someSidebar",next:{title:"Data Structure",permalink:"/docs/data"}},l=[{value:"Methods list",id:"methods-list",children:[]},{value:"Get address info",id:"get-address-info",children:[{value:"Method",id:"method",children:[]},{value:"Return value",id:"return-value",children:[]},{value:"Example",id:"example",children:[]}]},{value:"Get live cells",id:"get-live-cells",children:[{value:"Method",id:"method-1",children:[]},{value:"Return value",id:"return-value-1",children:[]},{value:"Example",id:"example-1",children:[]}]},{value:"Sign tx",id:"sign-tx",children:[{value:"Method:",id:"method-2",children:[]},{value:"Return value:",id:"return-value-2",children:[]},{value:"Example:",id:"example-2",children:[]}]},{value:"Sign and send tx",id:"sign-and-send-tx",children:[{value:"Method:",id:"method-3",children:[]},{value:"Return value:",id:"return-value-3",children:[]},{value:"Example:",id:"example-3",children:[]}]},{value:"Send tx",id:"send-tx",children:[{value:"Method:",id:"method-4",children:[]},{value:"Return value:",id:"return-value-4",children:[]},{value:"Example:",id:"example-4",children:[]}]}],i={rightToc:l};function r(e){var n=e.components,a=Object(c.a)(e,["components"]);return Object(b.b)("wrapper",Object(t.a)({},i,a,{components:n,mdxType:"MDXLayout"}),Object(b.b)("p",null,"DApp demo: ",Object(b.b)("a",Object(t.a)({parentName:"p"},{href:"https://github.com/rebase-network/simplestdapp/"}),"https://github.com/rebase-network/simplestdapp/")),Object(b.b)("p",null,"Synapse will inject a object ",Object(b.b)("inlineCode",{parentName:"p"},"ckb")," into browser ",Object(b.b)("inlineCode",{parentName:"p"},"window")," object, so you can use method under ckb directly. The following docs will talk about how to use the methods provided by ckb."),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Note"),": The sdk will be changed frequently before we publish the production version. If you have any questions, problems and suggestions, do not hesitate to create an issue."),Object(b.b)("h2",{id:"methods-list"},"Methods list"),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},Object(b.b)("a",Object(t.a)({parentName:"li"},{href:"#get-address-info"}),"ckb.getAddressInfo")),Object(b.b)("li",{parentName:"ul"},Object(b.b)("a",Object(t.a)({parentName:"li"},{href:"#get-live-cells"}),"ckb.getLiveCells")),Object(b.b)("li",{parentName:"ul"},Object(b.b)("a",Object(t.a)({parentName:"li"},{href:"#sign-tx"}),"ckb.sign")),Object(b.b)("li",{parentName:"ul"},Object(b.b)("a",Object(t.a)({parentName:"li"},{href:"#sign-and-send-tx"}),"ckb.signSend")),Object(b.b)("li",{parentName:"ul"},Object(b.b)("a",Object(t.a)({parentName:"li"},{href:"#send-tx"}),"ckb.send"))),Object(b.b)("h2",{id:"get-address-info"},"Get address info"),Object(b.b)("h3",{id:"method"},"Method"),Object(b.b)("pre",null,Object(b.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"ckb.getAddressInfo;\n\nconst addressInfo = await ckb.getAddressInfo();\n")),Object(b.b)("h3",{id:"return-value"},"Return value"),Object(b.b)("pre",null,Object(b.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),'{\n  message: string // "get address info successfully"\n  success: boolean  // true\n  type: string  // "address_info"\n  data: {\n    address: string; // current address(secp256k1)\n    lock: string; // lock script hash value\n    publicKey: stirng;  // public key\n    type: string, // currently a fixed value: Secp256k1\n    capacity: string; // capacity in string format, such as "516899970000"\n  }\n}\n')),Object(b.b)("h3",{id:"example"},"Example"),Object(b.b)("pre",null,Object(b.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"const addressInfo = await ckb.getAddressInfo();\nconsole.log('addressInfo: ', addressInfo);\n")),Object(b.b)("p",null,"will output:"),Object(b.b)("pre",null,Object(b.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),'{\n  message: "get address info successfully",\n  success: true,\n  type: "address_info",\n  data: {\n    "address":"ckt1qyqgadxhtq27ygrm62dqkdj32gl95j8gl56qum0yyn",\n    "lock":"0x111823010653d32d36b18c9a257fe13158ca012e22b9b82f0640be187f10904b",\n    "publicKey":"0x021b30b3047a645d8b6c10c513b767a3e08efa1a53df5f81bcb37af3c8c8358ae9",\n    "type":"Secp256k1",\n    "capacity":"516899970000"\n  }\n}\n')),Object(b.b)("h2",{id:"get-live-cells"},"Get live cells"),Object(b.b)("h3",{id:"method-1"},"Method"),Object(b.b)("pre",null,Object(b.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),'ckb.getLiveCells;\n\ninterface QueryCellsParams {\n    capacity: string;\n    limit: string;\n    hasData: string;\n}\n\nlimit : transaction counts\ncapacity: capacity needed to be transfer\nhasData: "true"|"false"| Not exist\n         "true" : get cell contains outputdata not equal to "0x";\n         "false": get cell contains outputdata equal to "0x";\n         Not exist: get all cell\n\nconst liveCells = await ckb.getLiveCells(params: QueryCellsParams);\n')),Object(b.b)("h3",{id:"return-value-1"},"Return value"),Object(b.b)("pre",null,Object(b.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"{\n  message: string // \"get live cells successfully\"\n  success: boolean  // true\n  type: string  // \"live_cells\"\n  data: Cell[]\n}\n\ninterface LockScript {\n  codeHash: string; // '0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8'\n  hashType: string; // 'type'\n  args: string; // '0x8eb4d75815e2207bd29a0b3651523e5a48e8fd34'\n}\n\ninterface Cell {\n  blockHash: string; // '0xd9027f4740c5995b17f2580ca5db9ac4ce4909e652ede2eb26d64709c26201ae',\n  lock: LockScript | null;\n  outPoint: {\n    txHash: string; // '0xdb255da9ceb84c81e2053238d239e65a92076f3080aee13346d586746b3bc8ce'\n    index: string; // '0x1'\n  };\n  outputData: string; // '0x'\n  outputDataLen: string; // '0x0'\n  capacity: string; // '0x535a743210'\n  type: LockScript | null;\n  dataHash: string; // '0x0000000000000000000000000000000000000000000000000000000000000000'\n  status: string; // 'live'\n}\n\n")),Object(b.b)("h3",{id:"example-1"},"Example"),Object(b.b)("pre",null,Object(b.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"await window.ckb.getLiveCells({ limit: '10' });\nawait window.ckb.getLiveCells({ capacity: '200' });\nawait window.ckb.getLiveCells({ limit: '10', hasData: 'true' });\nawait window.ckb.getLiveCells({ capacity: '200', hasData: 'false' });\nconsole.log('live cells: ', liveCells);\n")),Object(b.b)("p",null,"will output:"),Object(b.b)("pre",null,Object(b.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"{\n  type: 'live_cells',\n  success: true,\n  message: 'get live cells successfully',\n  data: [\n    {\n      blockHash: '0xd9027f4740c5995b17f2580ca5db9ac4ce4909e652ede2eb26d64709c26201ae',\n      lock: {\n        codeHash: '0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8',\n        hashType: 'type',\n        args: '0x8eb4d75815e2207bd29a0b3651523e5a48e8fd34',\n      },\n      outPoint: {\n        txHash: '0xdb255da9ceb84c81e2053238d239e65a92076f3080aee13346d586746b3bc8ce',\n        index: '0x1',\n      },\n      outputData: '0x',\n      outputDataLen: '0x0',\n      capacity: '0x535a743210',\n      type: {\n          codeHash: null,\n          hashType: null,\n          args: null\n      },\n      dataHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\n      status: 'live',\n    },\n  ],\n}\n\n")),Object(b.b)("h2",{id:"sign-tx"},"Sign tx"),Object(b.b)("p",null,"Dapp could use ",Object(b.b)("inlineCode",{parentName:"p"},"sign")," method to sign tx with Synapse, it will bring up a notification window with the password form. After user enter correct password, ",Object(b.b)("inlineCode",{parentName:"p"},"sign")," method will return signed tx."),Object(b.b)("h3",{id:"method-2"},"Method:"),Object(b.b)("pre",null,Object(b.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"ckb.sign;\n\nconst signedTx = await sign(params);\n")),Object(b.b)("p",null,Object(b.b)("inlineCode",{parentName:"p"},"params")," has the following structure which is the same as ",Object(b.b)("inlineCode",{parentName:"p"},"ckb.send"),"\uff1a"),Object(b.b)("pre",null,Object(b.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"// ? means optional\n// For how to use the params, please refer to below example\nparams: {\n  tx: TX_IN_JSON_FORMAT, // required. ckb raw transaction\n  meta?: { // optional\n    config: { // This is telling which inputs you want to sign\n      index: 0, // index value in inputs array. Default: 0\n      length: -1  // length from index\n    }\n  }\n}\n\n")),Object(b.b)("h3",{id:"return-value-2"},"Return value:"),Object(b.b)("p",null,"Will return:"),Object(b.b)("details",null,Object(b.b)("summary",null,"Click to expand"),Object(b.b)("p",null,"Currently there is no error returned."),Object(b.b)("pre",null,Object(b.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"{\n  type: 'sign',\n  success: true,\n  message: 'tx is signed',\n  data: {\n    tx: TX_JSON_SIGNED,\n  }\n}\n"))),Object(b.b)("h3",{id:"example-2"},"Example:"),Object(b.b)("ol",null,Object(b.b)("li",{parentName:"ol"},"Prepare for you data to be signed")),Object(b.b)("details",null,Object(b.b)("summary",null,"Click to expand"),Object(b.b)("pre",null,Object(b.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"// https://explorer.nervos.org/aggron/transaction/0x44f543d59974cb9dac09323008a162beebaa19e6d7d0dbf91507947f678e612c\nconst rawTx = {\n  cellDeps: [\n    {\n      depType: 'depGroup',\n      outPoint: {\n        txHash: '0xf8de3bb47d055cdf460d93a2a6e1b05f7432f9777c8c474abf4eec1d4aee5d37',\n        index: '0x0',\n      },\n    },\n    {\n      depType: 'code',\n      outPoint: {\n        txHash: '0x809e977a2537b181aeef4b6bbc4cfd4e5d9dbd699aa836a1549089016ccee455',\n        index: '0x0',\n      },\n    },\n    {\n      depType: 'code',\n      outPoint: {\n        txHash: '0x7fc297edbb7bef34343d4449bf04813cf6a12c3873c83da20d31f8e402ee9f75',\n        index: '0x0',\n      },\n    },\n    {\n      depType: 'code',\n      outPoint: {\n        txHash: '0x8dab22e2507dbcc90693d2a6d4beebfcc320f72b3e05ca1473f627b942955c73',\n        index: '0x0',\n      },\n    },\n  ],\n\n  headerDeps: [],\n\n  inputs: [\n    {\n      previousOutput: {\n        txHash: '0x4a3f8226f5448c02b5f8d94a17aea546ccad400df144f57bb76aabb5ce9ea0bb',\n        index: '0x0',\n      },\n      since: '0x0',\n    },\n    {\n      previousOutput: {\n        txHash: '0x4a3f8226f5448c02b5f8d94a17aea546ccad400df144f57bb76aabb5ce9ea0bb',\n        index: '0x1',\n      },\n      since: '0x0',\n    },\n    {\n      previousOutput: {\n        txHash: '0x4a3f8226f5448c02b5f8d94a17aea546ccad400df144f57bb76aabb5ce9ea0bb',\n        index: '0x2',\n      },\n      since: '0x0',\n    },\n    {\n      previousOutput: {\n        txHash: '0xd9ec339161532b1786b547d5ed24520d1ed68208f81b1deea56604f5bdb6122e',\n        index: '0x5',\n      },\n      since: '0x0',\n    },\n    {\n      previousOutput: {\n        txHash: '0x630486b8061894fa98a1ecc03e135a0361a47f5bdd10a0e1c5df0e3c37a416a6',\n        index: '0x4',\n      },\n      since: '0x0',\n    },\n  ],\n\n  outputs: [\n    {\n      capacity: '0x6fc23ac00',\n      lock: {\n        args:\n          '0x00000000000000000000000000000000000000000000000000000000000000009417da44c3f62caa8f514a9aef8153ff8a148d628803d9579b9ddbd0b410cbb3',\n        codeHash: '0x66b29f4c99c832d852f5a9c6018dedd6f90a5339f2db71276366fd5faa8173c8',\n        hashType: 'type',\n      },\n      type: {\n        args:\n          '0x00000000000000000728461320fe9bac472fb4b71984acb4451bc544360cff57d980df25fd80f1b005000000',\n        codeHash: '0x9fe22d1defd1f7b765f2b814b2fdb9ba0e9a163bc1f5de0a3364f0ce4a856328',\n        hashType: 'type',\n      },\n    },\n    {\n      capacity: '0x6fc23df2b',\n      lock: {\n        args:\n          '0x00000000000000000000000000000000000000000000000000000000000000009417da44c3f62caa8f514a9aef8153ff8a148d628803d9579b9ddbd0b410cbb3',\n        codeHash: '0x66b29f4c99c832d852f5a9c6018dedd6f90a5339f2db71276366fd5faa8173c8',\n        hashType: 'type',\n      },\n    },\n    {\n      capacity: '0x47272df00',\n      lock: {\n        args:\n          '0x00000000000000000000000000000000000000000000000000000000000000009417da44c3f62caa8f514a9aef8153ff8a148d628803d9579b9ddbd0b410cbb3',\n        codeHash: '0x66b29f4c99c832d852f5a9c6018dedd6f90a5339f2db71276366fd5faa8173c8',\n        hashType: 'type',\n      },\n      type: {\n        args: '0xfdc6bb73b0cbb033ffb122b7cd0a5bdec5de445637908239feb4f2e5168a4d09',\n        codeHash: '0x8971b3a963e6288868cc0ff81686ae177c7ee315a471298f486ae2074260ff4c',\n        hashType: 'type',\n      },\n    },\n    {\n      capacity: '0x16b969d00',\n      lock: {\n        args: '0xa3f81ce386206baf6673217a4ddc70e07b26da14',\n        codeHash: '0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8',\n        hashType: 'type',\n      },\n    },\n    {\n      capacity: '0x351e771a33d2',\n      lock: {\n        args: '0xd310bba5375bda7a2ace4f9a483bd51d12384bd1',\n        codeHash: '0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8',\n        hashType: 'type',\n      },\n    },\n    {\n      capacity: '0x16b969d00',\n      lock: {\n        args: '0xd310bba5375bda7a2ace4f9a483bd51d12384bd1',\n        codeHash: '0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8',\n        hashType: 'type',\n      },\n    },\n    {\n      capacity: '0x35458af00',\n      lock: {\n        args: '0xd310bba5375bda7a2ace4f9a483bd51d12384bd1',\n        codeHash: '0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8',\n        hashType: 'type',\n      },\n      type: {\n        args: '0xfdc6bb73b0cbb033ffb122b7cd0a5bdec5de445637908239feb4f2e5168a4d09',\n        codeHash: '0x8971b3a963e6288868cc0ff81686ae177c7ee315a471298f486ae2074260ff4c',\n        hashType: 'type',\n      },\n    },\n  ],\n\n  outputsData: [\n    '0x2bdf23fc0600000000000000000000005d1d000000000000000000000000000010270000000000000000000000000000',\n    '0x',\n    '0x5d1d0000000000000000000000000000',\n    '0x',\n    '0x',\n    '0x',\n    '0x45050000000000000000000000000000',\n  ],\n\n  version: '0x0',\n\n  witnesses: [\n    {\n      inputType: '',\n      lock: '',\n      outputType: '',\n    },\n    {\n      inputType: '',\n      lock: '',\n      outputType: '',\n    },\n    {\n      inputType: '',\n      lock: '',\n      outputType: '',\n    },\n    {\n      inputType: '',\n      lock: '',\n      outputType: '',\n    },\n    {\n      inputType: '',\n      lock: '',\n      outputType: '',\n    },\n  ],\n};\n"))),Object(b.b)("ol",{start:2},Object(b.b)("li",{parentName:"ol"},"Sign:")),Object(b.b)("pre",null,Object(b.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"const rawTxWithMeta = {\n  tx: rawTx,\n  meta: {\n    // optional\n    config: { index: 3, length: 2 }, // sign the 4th and 5th of inputs array\n  },\n};\n\nconst txResult = await ckb.sign(rawTxWithMeta);\n")),Object(b.b)("ol",{start:3},Object(b.b)("li",{parentName:"ol"},"Will pop up a notification window to prompt user to enter Synapse wallet password. The ",Object(b.b)("inlineCode",{parentName:"li"},"sign")," method will return value after user enter password.")),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"TX is signed successfully:")),Object(b.b)("p",null,"Note the value inside witnesses array, it's the signed result."),Object(b.b)("p",null,"Will return:"),Object(b.b)("details",null,Object(b.b)("summary",null,"Click to expand"),Object(b.b)("pre",null,Object(b.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"{\n  type: 'sign',\n  success: true,\n  message: 'tx is signed',\n  data: {\n    tx: {\n      cellDeps: [\n        {\n          depType: 'depGroup',\n          outPoint: {\n            txHash: '0xf8de3bb47d055cdf460d93a2a6e1b05f7432f9777c8c474abf4eec1d4aee5d37',\n            index: '0x0',\n          },\n        },\n        {\n          depType: 'code',\n          outPoint: {\n            txHash: '0x809e977a2537b181aeef4b6bbc4cfd4e5d9dbd699aa836a1549089016ccee455',\n            index: '0x0',\n          },\n        },\n        {\n          depType: 'code',\n          outPoint: {\n            txHash: '0x7fc297edbb7bef34343d4449bf04813cf6a12c3873c83da20d31f8e402ee9f75',\n            index: '0x0',\n          },\n        },\n        {\n          depType: 'code',\n          outPoint: {\n            txHash: '0x8dab22e2507dbcc90693d2a6d4beebfcc320f72b3e05ca1473f627b942955c73',\n            index: '0x0',\n          },\n        },\n      ],\n\n      headerDeps: [],\n\n      inputs: [\n        {\n          previousOutput: {\n            txHash: '0x4a3f8226f5448c02b5f8d94a17aea546ccad400df144f57bb76aabb5ce9ea0bb',\n            index: '0x0',\n          },\n          since: '0x0',\n        },\n        {\n          previousOutput: {\n            txHash: '0x4a3f8226f5448c02b5f8d94a17aea546ccad400df144f57bb76aabb5ce9ea0bb',\n            index: '0x1',\n          },\n          since: '0x0',\n        },\n        {\n          previousOutput: {\n            txHash: '0x4a3f8226f5448c02b5f8d94a17aea546ccad400df144f57bb76aabb5ce9ea0bb',\n            index: '0x2',\n          },\n          since: '0x0',\n        },\n        {\n          previousOutput: {\n            txHash: '0xd9ec339161532b1786b547d5ed24520d1ed68208f81b1deea56604f5bdb6122e',\n            index: '0x5',\n          },\n          since: '0x0',\n        },\n        {\n          previousOutput: {\n            txHash: '0x630486b8061894fa98a1ecc03e135a0361a47f5bdd10a0e1c5df0e3c37a416a6',\n            index: '0x4',\n          },\n          since: '0x0',\n        },\n      ],\n\n      outputs: [\n        {\n          capacity: '0x6fc23ac00',\n          lock: {\n            args:\n              '0x00000000000000000000000000000000000000000000000000000000000000009417da44c3f62caa8f514a9aef8153ff8a148d628803d9579b9ddbd0b410cbb3',\n            codeHash: '0x66b29f4c99c832d852f5a9c6018dedd6f90a5339f2db71276366fd5faa8173c8',\n            hashType: 'type',\n          },\n          type: {\n            args:\n              '0x00000000000000000728461320fe9bac472fb4b71984acb4451bc544360cff57d980df25fd80f1b005000000',\n            codeHash: '0x9fe22d1defd1f7b765f2b814b2fdb9ba0e9a163bc1f5de0a3364f0ce4a856328',\n            hashType: 'type',\n          },\n        },\n        {\n          capacity: '0x6fc23df2b',\n          lock: {\n            args:\n              '0x00000000000000000000000000000000000000000000000000000000000000009417da44c3f62caa8f514a9aef8153ff8a148d628803d9579b9ddbd0b410cbb3',\n            codeHash: '0x66b29f4c99c832d852f5a9c6018dedd6f90a5339f2db71276366fd5faa8173c8',\n            hashType: 'type',\n          },\n        },\n        {\n          capacity: '0x47272df00',\n          lock: {\n            args:\n              '0x00000000000000000000000000000000000000000000000000000000000000009417da44c3f62caa8f514a9aef8153ff8a148d628803d9579b9ddbd0b410cbb3',\n            codeHash: '0x66b29f4c99c832d852f5a9c6018dedd6f90a5339f2db71276366fd5faa8173c8',\n            hashType: 'type',\n          },\n          type: {\n            args: '0xfdc6bb73b0cbb033ffb122b7cd0a5bdec5de445637908239feb4f2e5168a4d09',\n            codeHash: '0x8971b3a963e6288868cc0ff81686ae177c7ee315a471298f486ae2074260ff4c',\n            hashType: 'type',\n          },\n        },\n        {\n          capacity: '0x16b969d00',\n          lock: {\n            args: '0xa3f81ce386206baf6673217a4ddc70e07b26da14',\n            codeHash: '0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8',\n            hashType: 'type',\n          },\n        },\n        {\n          capacity: '0x351e771a33d2',\n          lock: {\n            args: '0xd310bba5375bda7a2ace4f9a483bd51d12384bd1',\n            codeHash: '0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8',\n            hashType: 'type',\n          },\n        },\n        {\n          capacity: '0x16b969d00',\n          lock: {\n            args: '0xd310bba5375bda7a2ace4f9a483bd51d12384bd1',\n            codeHash: '0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8',\n            hashType: 'type',\n          },\n        },\n        {\n          capacity: '0x35458af00',\n          lock: {\n            args: '0xd310bba5375bda7a2ace4f9a483bd51d12384bd1',\n            codeHash: '0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8',\n            hashType: 'type',\n          },\n          type: {\n            args: '0xfdc6bb73b0cbb033ffb122b7cd0a5bdec5de445637908239feb4f2e5168a4d09',\n            codeHash: '0x8971b3a963e6288868cc0ff81686ae177c7ee315a471298f486ae2074260ff4c',\n            hashType: 'type',\n          },\n        },\n      ],\n\n      outputsData: [\n        '0x2bdf23fc0600000000000000000000005d1d000000000000000000000000000010270000000000000000000000000000',\n        '0x',\n        '0x5d1d0000000000000000000000000000',\n        '0x',\n        '0x',\n        '0x',\n        '0x45050000000000000000000000000000',\n      ],\n\n      version: '0x0',\n\n      witnesses: [\n        {\n          inputType: '',\n          lock: '',\n          outputType: '',\n        },\n        {\n          inputType: '',\n          lock: '',\n          outputType: '',\n        },\n        {\n          inputType: '',\n          lock: '',\n          outputType: '',\n        },\n        '0x5500000010000000550000005500000041000000d1e172abccec16973df781ec6a4a19b0aa9930be7e8ef9b6b7b43d0bda95b9ac4a271ed96e28164c0d15136be5b0d47a1c087aac76b7ce5b8f36caa095f6794a00',\n        {\n          inputType: '',\n          lock: '',\n          outputType: '',\n        },\n      ],\n    },\n\n},\n};\n\n"))),Object(b.b)("h2",{id:"sign-and-send-tx"},"Sign and send tx"),Object(b.b)("p",null,"Dapp could use ",Object(b.b)("inlineCode",{parentName:"p"},"signSend")," method to sign and send tx, it will bring up a notification window with the password form. After user enter correct password, ",Object(b.b)("inlineCode",{parentName:"p"},"signSend")," method will signed tx, then send it and return the result."),Object(b.b)("h3",{id:"method-3"},"Method:"),Object(b.b)("pre",null,Object(b.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"ckb.signSend;\n\nconst result = await signSend(params);\n")),Object(b.b)("p",null,Object(b.b)("inlineCode",{parentName:"p"},"params")," has the following structure\uff1a"),Object(b.b)("pre",null,Object(b.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"params: {\n  tx: TX_IN_JSON_FORMAT // required, refer to sign method for data sample\n  meta?: { // optional\n    config: { // This is telling which inputs you want to sign\n      index: 0, // index value in inputs array. Default: 0\n      length: -1  // length from index\n    }\n  }\n}\n")),Object(b.b)("h3",{id:"return-value-3"},"Return value:"),Object(b.b)("pre",null,Object(b.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"{\n  type: string; // the value is \"signSend\"\n  success: boolean;\n  message: string;  // now is a fixed value: 'tx is sent'\n  data: {\n    hash: string | null; // tx hash, will be `null` if fail to send tx\n  },\n};\n")),Object(b.b)("h3",{id:"example-3"},"Example:"),Object(b.b)("pre",null,Object(b.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"const rawTxWithMeta = {\n  tx: SIGNED_TX_IN_JSON_FORMAT // required. please refer to sign method to see the data format\n  meta: { // optional\n    config: { index: 3, length: 2 } // sign the 4th and 5th of inputs array\n  },\n}\n\nconst result = await ckb.signSend(rawTxWithMeta);\n")),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"TX is sent successfully:")),Object(b.b)("pre",null,Object(b.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"{\n  type: \"signSend\",\n  success: true,\n  message: 'tx is sent',\n  data: {\n    hash: '0x02805e5a97a09ab9e8634fb0d3c75ed2ee4669f7e2ef67dcc33dc6d7f931821d',\n  },\n};\n")),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"TX fail to send:"),"\n",Object(b.b)("inlineCode",{parentName:"p"},"success")," value will be ",Object(b.b)("inlineCode",{parentName:"p"},"false"),", ",Object(b.b)("inlineCode",{parentName:"p"},"hash")," will be ",Object(b.b)("inlineCode",{parentName:"p"},"null"),"."),Object(b.b)("pre",null,Object(b.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"{\n  type: \"signSend\",\n  success: false,\n  message: 'tx failed to sent',\n  data: {\n    hash: null\n    },\n  },\n};\n")),Object(b.b)("h2",{id:"send-tx"},"Send tx"),Object(b.b)("p",null,"Dapp could use ",Object(b.b)("inlineCode",{parentName:"p"},"send")," method to send signed tx, it will bring up a notification window with the password form. After user enter correct password, tx will be sent and return the tx hash if succeed."),Object(b.b)("h3",{id:"method-4"},"Method:"),Object(b.b)("pre",null,Object(b.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"ckb.send;\n\nconst result = await ckb.send(params);\n")),Object(b.b)("p",null,Object(b.b)("inlineCode",{parentName:"p"},"params")," has the following structure\uff1a"),Object(b.b)("pre",null,Object(b.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"params: {\n  tx: SIGNED_TX_IN_JSON_FORMAT; // required\n}\n")),Object(b.b)("h3",{id:"return-value-4"},"Return value:"),Object(b.b)("pre",null,Object(b.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"{\n  type: string; // the value is \"send\"\n  success: boolean;\n  message: string;  // now is a fixed value: 'tx is sent'\n  data: {\n    hash: string | null; // tx hash, will be `null` if fail to send tx\n  },\n};\n")),Object(b.b)("h3",{id:"example-4"},"Example:"),Object(b.b)("pre",null,Object(b.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"const rawTxWithMeta = {\n  tx: SIGNED_TX_IN_JSON_FORMAT, // please refer to sign method to see the data format\n};\n\nconst result = await ckb.send(rawTxWithMeta);\n")),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"TX is sent successfully:")),Object(b.b)("pre",null,Object(b.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"{\n  type: \"send\",\n  success: true,\n  message: 'tx is sent',\n  data: {\n    hash: '0x02805e5a97a09ab9e8634fb0d3c75ed2ee4669f7e2ef67dcc33dc6d7f931821d',\n  },\n};\n")),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"TX fail to send:"),"\n",Object(b.b)("inlineCode",{parentName:"p"},"success")," value will be ",Object(b.b)("inlineCode",{parentName:"p"},"false"),", ",Object(b.b)("inlineCode",{parentName:"p"},"hash")," will be ",Object(b.b)("inlineCode",{parentName:"p"},"null"),"."),Object(b.b)("pre",null,Object(b.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"{\n  type: \"send\",\n  success: false,\n  message: 'tx failed to sent',\n  data: {\n    hash: null\n  },\n};\n")))}r.isMDXComponent=!0}}]);